// ---------- Prisma schema for BestTask ----------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  WORKER
  ADMIN
}

enum BudgetType {
  fixed
  hourly
}

enum PaymentStatus {
  processing
  succeeded
  requires_payment_method
  requires_action
  canceled
  failed
}

model User {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  email       String   @unique
  name        String?
  phone       String?
  role        Role     @default(CLIENT)

  worker      WorkerProfile?
  reviewsFrom Review[] @relation("reviews_from")
  reviewsTo   Review[] @relation("reviews_to")

  accounts    Account[]
  sessions    Session[]

  jobs        Job[]    @relation("user_jobs")
  offers      Offer[]  @relation("user_offers")
  contracts   Contract[] @relation("user_contracts")
}

model WorkerProfile {
  id               String  @id @default(cuid())
  userId           String  @unique
  user             User    @relation(fields: [userId], references: [id])
  bio              String?
  skills           String?
  connectedStripeId String?
}

model Job {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  clientId    String
  client      User      @relation("user_jobs", fields: [clientId], references: [id])

  title       String
  description String
  budgetType  BudgetType @default(fixed)
  budgetMin   Int?
  budgetMax   Int?
  address     String?
  latitude    Float?
  longitude   Float?

  offers      Offer[]
  contracts   Contract[]
}

model Offer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  jobId     String
  job       Job      @relation(fields: [jobId], references: [id])

  workerId  String
  worker    User     @relation("user_offers", fields: [workerId], references: [id])

  price     Int
  note      String?
  accepted  Boolean  @default(false)
}

model Contract {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())

  jobId       String
  job         Job      @relation(fields: [jobId], references: [id])

  workerId    String
  worker      User     @relation("user_contracts", fields: [workerId], references: [id])

  agreedPrice Int

  payment     Payment?
}

model Payment {
  id             String         @id @default(cuid())
  createdAt      DateTime       @default(now())
  contractId     String         @unique
  contract       Contract       @relation(fields: [contractId], references: [id])

  amount         Int
  fee            Int
  status         PaymentStatus
  stripeIntentId String?
}

// ---------- Auth.js / NextAuth tables ----------
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ---------- Reviews (optional, вже використовується в коді) ----------
model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  fromId    String
  toId      String
  rating    Int
  comment   String?

  from User @relation("reviews_from", fields: [fromId], references: [id])
  to   User @relation("reviews_to",   fields: [toId],   references: [id])
}
